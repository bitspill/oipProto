// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oip.proto

/*
Package oipProto is a generated protocol buffer package.

It is generated from these files:
	oip.proto
	historian.proto

It has these top-level messages:
	SignedMessage
	HistorianDataPoint
	HistorianPayout
*/
package oipProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Currently supported message types
type MessageTypes int32

const (
	// Invalid
	MessageTypes_InvalidMessage MessageTypes = 0
	// OIP 0.5 record message
	MessageTypes_OIP05 MessageTypes = 1
	// Historian record
	MessageTypes_Historian MessageTypes = 2
)

var MessageTypes_name = map[int32]string{
	0: "InvalidMessage",
	1: "OIP05",
	2: "Historian",
}
var MessageTypes_value = map[string]int32{
	"InvalidMessage": 0,
	"OIP05":          1,
	"Historian":      2,
}

func (x MessageTypes) String() string {
	return proto.EnumName(MessageTypes_name, int32(x))
}
func (MessageTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Currently supported signature verification means
type SignatureTypes int32

const (
	// Invalid
	SignatureTypes_InvalidSignature SignatureTypes = 0
	// FLO address message signing
	SignatureTypes_Flo SignatureTypes = 1
	// Bitcoin address message signing
	// https://tools.bitcoin.com/verify-message/
	SignatureTypes_Btc SignatureTypes = 2
)

var SignatureTypes_name = map[int32]string{
	0: "InvalidSignature",
	1: "Flo",
	2: "Btc",
}
var SignatureTypes_value = map[string]int32{
	"InvalidSignature": 0,
	"Flo":              1,
	"Btc":              2,
}

func (x SignatureTypes) String() string {
	return proto.EnumName(SignatureTypes_name, int32(x))
}
func (SignatureTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SignedMessage struct {
	// Raw Data that was signed by this message
	SerializedMessage []byte `protobuf:"bytes,1,opt,name=SerializedMessage,proto3" json:"SerializedMessage,omitempty"`
	// Specifies the type of contained data for further deserialization
	MessageType MessageTypes `protobuf:"varint,2,opt,name=MessageType,enum=oipProto.MessageTypes" json:"MessageType,omitempty"`
	// Identifies signature type for verification
	SignatureType SignatureTypes `protobuf:"varint,3,opt,name=SignatureType,enum=oipProto.SignatureTypes" json:"SignatureType,omitempty"`
	// Public Key used in the signing of orignal message
	PubKey []byte `protobuf:"bytes,4,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	// Signature of signed message
	Signature []byte `protobuf:"bytes,5,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *SignedMessage) Reset()                    { *m = SignedMessage{} }
func (m *SignedMessage) String() string            { return proto.CompactTextString(m) }
func (*SignedMessage) ProtoMessage()               {}
func (*SignedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SignedMessage) GetSerializedMessage() []byte {
	if m != nil {
		return m.SerializedMessage
	}
	return nil
}

func (m *SignedMessage) GetMessageType() MessageTypes {
	if m != nil {
		return m.MessageType
	}
	return MessageTypes_InvalidMessage
}

func (m *SignedMessage) GetSignatureType() SignatureTypes {
	if m != nil {
		return m.SignatureType
	}
	return SignatureTypes_InvalidSignature
}

func (m *SignedMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *SignedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedMessage)(nil), "oipProto.SignedMessage")
	proto.RegisterEnum("oipProto.MessageTypes", MessageTypes_name, MessageTypes_value)
	proto.RegisterEnum("oipProto.SignatureTypes", SignatureTypes_name, SignatureTypes_value)
}

func init() { proto.RegisterFile("oip.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xcf, 0x2c, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0xcf, 0x2c, 0x08, 0x00, 0xb1, 0x94, 0xde, 0x32,
	0x72, 0xf1, 0x06, 0x67, 0xa6, 0xe7, 0xa5, 0xa6, 0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a,
	0xe9, 0x70, 0x09, 0x06, 0xa7, 0x16, 0x65, 0x26, 0xe6, 0x64, 0x56, 0xc1, 0x05, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x78, 0x82, 0x30, 0x25, 0x84, 0x2c, 0xb8, 0xb8, 0xa1, 0xcc, 0x90, 0xca, 0x82, 0x54,
	0x09, 0x26, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x31, 0x3d, 0x98, 0xf9, 0x7a, 0x48, 0x92, 0xc5, 0x41,
	0xc8, 0x4a, 0x85, 0xec, 0x20, 0x16, 0x27, 0x96, 0x94, 0x16, 0x41, 0xf4, 0x32, 0x83, 0xf5, 0x4a,
	0x20, 0xf4, 0xa2, 0x48, 0x17, 0x07, 0xa1, 0x2a, 0x17, 0x12, 0xe3, 0x62, 0x0b, 0x28, 0x4d, 0xf2,
	0x4e, 0xad, 0x94, 0x60, 0x01, 0x3b, 0x0e, 0xca, 0x13, 0x92, 0xe1, 0xe2, 0x84, 0x2b, 0x94, 0x60,
	0x05, 0x4b, 0x21, 0x04, 0xb4, 0x6c, 0xb8, 0x78, 0x90, 0x9d, 0x24, 0x24, 0xc4, 0xc5, 0xe7, 0x99,
	0x57, 0x96, 0x98, 0x93, 0x09, 0xf3, 0x91, 0x00, 0x83, 0x10, 0x27, 0x17, 0xab, 0xbf, 0x67, 0x80,
	0x81, 0xa9, 0x00, 0xa3, 0x10, 0x2f, 0x17, 0xa7, 0x47, 0x66, 0x71, 0x49, 0x7e, 0x51, 0x66, 0x62,
	0x9e, 0x00, 0x93, 0x96, 0x05, 0x17, 0x1f, 0xaa, 0xa3, 0x84, 0x44, 0xb8, 0x04, 0xa0, 0xfa, 0xe1,
	0x12, 0x02, 0x0c, 0x42, 0xec, 0x5c, 0xcc, 0x6e, 0x39, 0xf9, 0x02, 0x8c, 0x20, 0x86, 0x53, 0x49,
	0xb2, 0x00, 0x53, 0x12, 0x1b, 0x38, 0xe0, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xc9,
	0xe7, 0x03, 0x85, 0x01, 0x00, 0x00,
}
