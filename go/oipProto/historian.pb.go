// Code generated by protoc-gen-go. DO NOT EDIT.
// source: historian.proto

package oipProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HistorianDataPoint struct {
	Version                  int32   `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	PubKey                   []byte  `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	MiningRigRentalsLast10   float64 `protobuf:"fixed64,3,opt,name=MiningRigRentalsLast10" json:"MiningRigRentalsLast10,omitempty"`
	MiningRigRentalsLast24Hr float64 `protobuf:"fixed64,4,opt,name=MiningRigRentalsLast24Hr" json:"MiningRigRentalsLast24Hr,omitempty"`
	AutominerPoolHashrate    float64 `protobuf:"fixed64,5,opt,name=AutominerPoolHashrate" json:"AutominerPoolHashrate,omitempty"`
	FloNetHashRate           float64 `protobuf:"fixed64,6,opt,name=FloNetHashRate" json:"FloNetHashRate,omitempty"`
	FloMarketPriceBTC        float64 `protobuf:"fixed64,7,opt,name=FloMarketPriceBTC" json:"FloMarketPriceBTC,omitempty"`
	FloMarketPriceUSD        float64 `protobuf:"fixed64,8,opt,name=FloMarketPriceUSD" json:"FloMarketPriceUSD,omitempty"`
	LtcMarketPriceUSD        float64 `protobuf:"fixed64,9,opt,name=LtcMarketPriceUSD" json:"LtcMarketPriceUSD,omitempty"`
	NiceHashLast             float64 `protobuf:"fixed64,10,opt,name=NiceHashLast" json:"NiceHashLast,omitempty"`
	NiceHash24Hr             float64 `protobuf:"fixed64,11,opt,name=NiceHash24hr" json:"NiceHash24hr,omitempty"`
}

func (m *HistorianDataPoint) Reset()                    { *m = HistorianDataPoint{} }
func (m *HistorianDataPoint) String() string            { return proto.CompactTextString(m) }
func (*HistorianDataPoint) ProtoMessage()               {}
func (*HistorianDataPoint) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *HistorianDataPoint) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HistorianDataPoint) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *HistorianDataPoint) GetMiningRigRentalsLast10() float64 {
	if m != nil {
		return m.MiningRigRentalsLast10
	}
	return 0
}

func (m *HistorianDataPoint) GetMiningRigRentalsLast24Hr() float64 {
	if m != nil {
		return m.MiningRigRentalsLast24Hr
	}
	return 0
}

func (m *HistorianDataPoint) GetAutominerPoolHashrate() float64 {
	if m != nil {
		return m.AutominerPoolHashrate
	}
	return 0
}

func (m *HistorianDataPoint) GetFloNetHashRate() float64 {
	if m != nil {
		return m.FloNetHashRate
	}
	return 0
}

func (m *HistorianDataPoint) GetFloMarketPriceBTC() float64 {
	if m != nil {
		return m.FloMarketPriceBTC
	}
	return 0
}

func (m *HistorianDataPoint) GetFloMarketPriceUSD() float64 {
	if m != nil {
		return m.FloMarketPriceUSD
	}
	return 0
}

func (m *HistorianDataPoint) GetLtcMarketPriceUSD() float64 {
	if m != nil {
		return m.LtcMarketPriceUSD
	}
	return 0
}

func (m *HistorianDataPoint) GetNiceHashLast() float64 {
	if m != nil {
		return m.NiceHashLast
	}
	return 0
}

func (m *HistorianDataPoint) GetNiceHash24Hr() float64 {
	if m != nil {
		return m.NiceHash24Hr
	}
	return 0
}

type HistorianPayout struct {
	Version int32 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
}

func (m *HistorianPayout) Reset()                    { *m = HistorianPayout{} }
func (m *HistorianPayout) String() string            { return proto.CompactTextString(m) }
func (*HistorianPayout) ProtoMessage()               {}
func (*HistorianPayout) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HistorianPayout) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*HistorianDataPoint)(nil), "oipProto.HistorianDataPoint")
	proto.RegisterType((*HistorianPayout)(nil), "oipProto.HistorianPayout")
}

func init() { proto.RegisterFile("historian.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x5f, 0x4b, 0xf3, 0x30,
	0x14, 0xc6, 0xe9, 0xbb, 0x77, 0x7f, 0x3c, 0x0e, 0x87, 0x01, 0x47, 0x2e, 0xc7, 0x2e, 0xa4, 0xa0,
	0x88, 0xce, 0xe2, 0x85, 0x77, 0x6a, 0x19, 0x05, 0xb7, 0x11, 0x32, 0xe7, 0x7d, 0x56, 0xc2, 0x1a,
	0xac, 0x39, 0x23, 0x4d, 0x2f, 0xf6, 0x95, 0xfd, 0x14, 0x92, 0xe8, 0xc4, 0xad, 0x9d, 0x77, 0x39,
	0xcf, 0xef, 0x77, 0x20, 0xe1, 0x09, 0xf4, 0x32, 0x55, 0x58, 0x34, 0x4a, 0xe8, 0xab, 0xb5, 0x41,
	0x8b, 0xa4, 0x83, 0x6a, 0xcd, 0xdc, 0x69, 0xf8, 0xd1, 0x00, 0x92, 0x6c, 0x69, 0x2c, 0xac, 0x60,
	0xa8, 0xb4, 0x25, 0x14, 0xda, 0xaf, 0xd2, 0x14, 0x0a, 0x35, 0x0d, 0x06, 0x41, 0xd8, 0xe4, 0xdb,
	0x91, 0xf4, 0xa1, 0xc5, 0xca, 0xe5, 0xb3, 0xdc, 0xd0, 0x7f, 0x83, 0x20, 0xec, 0xf2, 0xef, 0x89,
	0xdc, 0x41, 0x7f, 0xaa, 0xb4, 0xd2, 0x2b, 0xae, 0x56, 0x5c, 0x6a, 0x2b, 0xf2, 0x62, 0x22, 0x0a,
	0x7b, 0x73, 0x4d, 0x1b, 0x83, 0x20, 0x0c, 0xf8, 0x01, 0x4a, 0xee, 0x81, 0xd6, 0x91, 0x51, 0x94,
	0x18, 0xfa, 0xdf, 0x6f, 0x1e, 0xe4, 0x24, 0x82, 0xb3, 0x87, 0xd2, 0xe2, 0xbb, 0xd2, 0xd2, 0x30,
	0xc4, 0x3c, 0x11, 0x45, 0x66, 0x84, 0x95, 0xb4, 0xe9, 0x17, 0xeb, 0x21, 0x39, 0x87, 0x93, 0x71,
	0x8e, 0x33, 0x69, 0x5d, 0xc2, 0x9d, 0xde, 0xf2, 0xfa, 0x5e, 0x4a, 0x2e, 0xe1, 0x74, 0x9c, 0xe3,
	0x54, 0x98, 0x37, 0x69, 0x99, 0x51, 0xa9, 0x7c, 0x7c, 0x79, 0xa2, 0x6d, 0xaf, 0x56, 0x41, 0xd5,
	0x5e, 0xcc, 0x63, 0xda, 0xa9, 0xb3, 0x17, 0xf3, 0xd8, 0xd9, 0x13, 0x9b, 0xee, 0xd9, 0x47, 0x5f,
	0x76, 0x05, 0x90, 0x21, 0x74, 0x67, 0x2a, 0x95, 0xee, 0x66, 0xee, 0xed, 0x14, 0xbc, 0xb8, 0x93,
	0xfd, 0x76, 0x46, 0x51, 0x66, 0xe8, 0xf1, 0xae, 0xe3, 0xb2, 0xe1, 0x05, 0xf4, 0x7e, 0xba, 0x66,
	0x62, 0x83, 0xe5, 0x1f, 0x45, 0x2f, 0x5b, 0xfe, 0xab, 0xdc, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x82, 0xa0, 0xf1, 0x48, 0x3d, 0x02, 0x00, 0x00,
}
